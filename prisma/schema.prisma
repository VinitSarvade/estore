// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  value    String
  path     String // Materialized Path field
  tagCodes String[]
  Facets   Facet[]
  Products Product[]

  @@map("categories")
}

model Facet {
  id           Int          @id @default(autoincrement())
  code         String
  categoryId   Int
  Categorories Category     @relation(fields: [categoryId], references: [id])
  Values       FacetValue[]

  @@unique([code, categoryId])
  @@map("facets")
}

model FacetValue {
  id      Int    @id @default(autoincrement())
  code    String
  name    String
  facetId Int
  Facet   Facet  @relation(fields: [facetId], references: [id])

  @@map("facet_values")
}

model ProductGroup {
  id       Int       @id @default(autoincrement())
  code     String    @unique
  name     String
  Products Product[] @relation("ProductGroup")

  @@map("product_groups")
}

model Product {
  id                  Int                  @id @default(autoincrement())
  code                String
  name                String
  description         String
  price               Float
  salePrice           Float?
  colorHex            String
  isDefaultProduct    Boolean
  categoryId          Int
  Category            Category             @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  ProductGroup        ProductGroup         @relation("ProductGroup", fields: [productGroupId], references: [id], onDelete: Cascade)
  productGroupId      Int
  ProductImages       ProductImage[]
  ProductSizes        ProductSizes[]
  ProductCompositions ProductComposition[]
  ProductAttributes   ProductAttributes[]
  CartItem            CartItem[]
  OrderItem           OrderItem[]

  @@unique([code, productGroupId])
  @@map("products")
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  productId  Int
  thumbnail  String?
  image      String
  fullscreen String?
  Product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductSizes {
  id            Int         @id @default(autoincrement())
  productId     Int
  sizeCode      String
  size          String
  name          String
  sizeScaleCode String
  Product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItem      CartItem[]
  OrderItem     OrderItem[]

  @@map("product_sizes")
}

model ProductComposition {
  id              Int                           @id @default(autoincrement())
  productId       Int
  compositionType String
  Product         Product                       @relation(fields: [productId], references: [id], onDelete: Cascade)
  Materials       ProductCompositionMaterials[]

  @@map("product_compositions")
}

model ProductCompositionMaterials {
  id                   Int                @id @default(autoincrement())
  productCompositionId Int
  name                 String
  amount               String
  ProductComposition   ProductComposition @relation(fields: [productCompositionId], references: [id], onDelete: Cascade)

  @@map("product_composition_materials")
}

model ProductAttributes {
  id        Int      @id @default(autoincrement())
  productId Int
  name      String
  value     String[]
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Items     CartItem[]

  @@map("carts")
}

model CartItem {
  id          Int          @id @default(autoincrement())
  cartId      Int
  productId   Int
  quantity    Int
  sizeId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Cart        Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  ProductSize ProductSizes @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId]) // Ensures unique product per cart
  @@map("cart_items")
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  status     OrderStatus @default(PROCESSING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  OrderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id              Int          @id @default(autoincrement())
  orderId         String
  productId       Int
  quantity        Int
  price           Float
  subtotal        Float
  sizeId          Int
  productSnapshot Json
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  Order           Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product         Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  ProductSize     ProductSizes @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
}
